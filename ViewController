//
//  ViewController.swift
//  FoodTracker
//
//  Created by admin on 7/12/17.
//  Copyright Â© 2017 Apple Inc. All rights reserved.
//

import Foundation
import UIKit
import CoreLocation
import MapKit
import CoreData

class ViewController: UIViewController, MKMapViewDelegate, CLLocationManagerDelegate {
    
    var locationManager:CLLocationManager!
    var mapView:MKMapView!
    var checkDrop: Bool = false;
    var checkZoom: Bool = false;
    var currentZoom: Double = 2;
    var zoom: Float = 0.01;
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view, typically from a nib.
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        // Create and Add MapView to our main view
        createMapView()
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        
        determineCurrentLocation()
    }
    
    func createMapView() {
        
        mapView = MKMapView()
        
        let leftMargin:CGFloat = 0
        let topMargin:CGFloat = 0
        let mapWidth:CGFloat = view.frame.size.width-20
        let mapHeight:CGFloat = 350
        
        let rect = CGRect(origin: CGPoint(x: leftMargin,y :topMargin), size:CGSize(width:mapWidth, height: mapHeight))
        
        mapView.frame = rect
        
        mapView.mapType = MKMapType.standard
        mapView.isZoomEnabled = true
        mapView.isScrollEnabled = true
        
        //Or. if needed we can position map in the centerof hte view
        mapView.center = view.center
        
        view.addSubview(mapView)
    }
    
    func determineCurrentLocation() {
        locationManager = CLLocationManager()
        locationManager.delegate = self
        locationManager.desiredAccuracy = kCLLocationAccuracyBest
        locationManager.requestAlwaysAuthorization()
        
        if CLLocationManager.locationServicesEnabled() {
            //locationManager.startUpdatingHeading()
            locationManager.startUpdatingLocation()
        }
    }
    
    /////////////////////////////////////////////////
    
    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
        let userLocation:CLLocation = locations[0] as CLLocation
        let center = CLLocationCoordinate2D(latitude: userLocation.coordinate.latitude, longitude: userLocation.coordinate.longitude);
        if(checkZoom == true){
            if currentZoom <= 1{
                zoom = 0.0001
            }
            else if currentZoom <= 2{
                zoom = 0.01
            }
            else if currentZoom <= 3{
                zoom = 0.1
            }
            else if currentZoom <= 4{
                zoom = 1
            }
            else if currentZoom <= 5{
                zoom = 10
            }
            else if currentZoom <= 6{
                zoom = 100
            }
        }
        let region = MKCoordinateRegion(center: center, span: MKCoordinateSpan(latitudeDelta: Double(zoom), longitudeDelta: Double(zoom)))
        mapView.setRegion(region, animated: true)
        
        if(checkDrop == true){
            /*let myAnnotation = MKPointAnnotation()
             myAnnotation.coordinate = CLLocationCoordinate2DMake(userLocation.coordinate.latitude, userLocation.coordinate.longitude);
             var newPin: Pin
             newPin = Pin(name: "", longitude: myAnnotation.coordinate.longitude, latitude: myAnnotation.coordinate.latitude, fileName: "", description: "")
             pinArray.append(newPin)
             myAnnotation.title = "Title"
             myAnnotation.subtitle = "subtitle"
             self.mapView.addAnnotation(myAnnotation)*/
            let annotation = MKPointAnnotation()
            annotation.coordinate = CLLocationCoordinate2DMake(userLocation.coordinate.latitude, userLocation.coordinate.longitude);
            annotation.title = ("Latitude:\(userLocation.coordinate.latitude)")
            annotation.subtitle = ("Longitude:\(userLocation.coordinate.longitude)")
            self.mapView.addAnnotation(annotation)
            checkDrop = false;
        }
    }
    
    func mapView(_ mapView: MKMapView, viewFor annotation: MKAnnotation) -> MKAnnotationView? {
        if annotation is MKUserLocation {
            return nil
        }
        let reuseId = "pin"
        var pinView = mapView.dequeueReusableAnnotationView(withIdentifier: reuseId) as? MKPinAnnotationView
        if pinView == nil {
            pinView = MKPinAnnotationView(annotation: annotation, reuseIdentifier: reuseId)
            pinView?.animatesDrop = true
            pinView?.canShowCallout = true
            pinView?.isDraggable = true
            //get the "i" button
            let rightButton: AnyObject! = UIButton(type: UIButtonType.detailDisclosure)
            pinView?.rightCalloutAccessoryView = rightButton as? UIView
        }
        else {
            pinView?.annotation = annotation
        }
        
        return pinView
    }
    
    //if pin tapped, toTheMoon segue
    func mapView(_ mapView: MKMapView, annotationView view: MKAnnotationView, calloutAccessoryControlTapped control: UIControl) {
        print(#function)
        if control == view.rightCalloutAccessoryView {
            performSegue(withIdentifier: "toTheMoon", sender: self)
        }
    }
    
    
    
    
    @IBAction func dropPin(_ sender: UIButton) {
        checkDrop = true;
    }
    
    @IBAction func zoomSlider(_ sender: UISlider) {
        currentZoom = Double(sender.value)
        checkZoom = true;
    }
    func mapView(_ mapView: MKMapView, didSelect view: MKAnnotationView){
        
    }
    
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {
        print("Error \(error)")
    }
    
}

